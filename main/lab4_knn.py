# -*- coding: utf-8 -*-
"""Lab4-KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RnbVSnrcn0XE8LIO-H6h0ug2LcKlUhdi
"""

# importing
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import seaborn as sns

# using train.csv for data
train_data = pd.read_csv('/content/titanic_data/train.csv')

# fill in null values
train_data["Age"].fillna(train_data["Age"].mean(), inplace = True)
train_data['Sex'] = train_data['Sex'].replace('male', 1)
train_data['Sex'] = train_data['Sex'].replace('female', 0)
train_data.drop(['Name', 'PassengerId', 'Fare', 'Ticket','Embarked', 'Cabin'], axis = 1, inplace = True)

# checking the data
train_data

# checking null
train_data.isnull().sum()

# standard scaling
def std_scale(data):
  result = []
  for x in data:
    result.append((x-np.mean(data))/np.std(data))
  return result

# scaling
X_scale = train_data[['Pclass','Sex','Age','SibSp','Parch']].apply(std_scale)

# splitting the dataset
Y = train_data['Survived']
X_train, X_test, y_train, y_test = train_test_split(X_scale, Y, test_size=0.20, random_state=101)

# acc list for later
accuracy_list = []

# iterating knn model from 1 to 30
for k in range(1,30):
  knn_model= KNeighborsClassifier(n_neighbors = k)
  knn_model.fit(X_train, y_train)
  y_pred = knn_model.predict(X_test)
  accuracy = accuracy_score(y_test, y_pred)
  accuracy_list.append(accuracy)

# plotting knn
plt.plot(range(1, 30), accuracy_list, marker='o')
plt.xlabel('K Value')
plt.ylabel('Accuracy')
plt.title('KNN Classifier Accuracy for Different K Values')
plt.show()

# finding best k to use
best_k = accuracy_list.index(max(accuracy_list)) + 1

# final knn model using k = 21
final_knn_model = KNeighborsClassifier(n_neighbors=best_k)
final_knn_model.fit(X_train, y_train)
y_pred_final = final_knn_model.predict(X_test)

# confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred_final)
sns.heatmap(conf_matrix, annot=True, cmap="Blues")
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()

# final accuracy
final_accuracy = accuracy_score(y_test, y_pred_final)
print(f"Final Accuracy: {final_accuracy * 100:.2f}%")

# cross-validation reporting, cv = 5
cross_valid_scores = cross_val_score(final_knn_model, X_scale, Y, cv = 5)
mean_cv_score = np.mean(cross_valid_scores)
std_cv_score = np.std(cross_valid_scores)
print(f"Mean Cross-Validation Score: {mean_cv_score:.8f}")
print(f"Standard Deviation of Cross-Validation Scores: {std_cv_score:.8f}")